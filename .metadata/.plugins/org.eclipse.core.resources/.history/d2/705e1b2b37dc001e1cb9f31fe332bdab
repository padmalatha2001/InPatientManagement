package com.admin.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.admin.bean.DepartmentBean;
import com.admin.entity.Department;
import com.admin.exception.DepartmentAlreadyExistsException;
import com.admin.exception.RecordNotFoundException;
import com.admin.service.DepartmentService;

@RestController
@RequestMapping("/department")
public class DepartmentController {

	@Autowired
	DepartmentService departmentService;
	private static Logger log = LoggerFactory.getLogger(DepartmentController.class.getSimpleName());

	@PostMapping("/save")
	public ResponseEntity<DepartmentBean> saveDepartment(@RequestBody DepartmentBean department) {
		log.info("Saving Department entity");

		departmentService.save(department);
		ResponseEntity<DepartmentBean> responseEntity = new ResponseEntity<>(department, HttpStatus.CREATED);
		log.info("Saving Department entity is done");
		return responseEntity;

	}

	@GetMapping("/getById/{id}")
	public ResponseEntity<DepartmentBean> getDepartmentById(@PathVariable long id) {
		log.info("Retrieving Department by Id");

		DepartmentBean departmentBean = departmentService.getById(id);
		log.info("Retrived department by id is successfully");
		return ResponseEntity.status(HttpStatus.OK).body(departmentBean);

	}

	@GetMapping("/getAll")
	public ResponseEntity<List<DepartmentBean>> getAllDepartments() {
		log.info("Retrieving All Departments");

		List<DepartmentBean> list = departmentService.getAll();
		ResponseEntity<List<DepartmentBean>> responseEntity = new ResponseEntity<>(list, HttpStatus.OK);
		log.info("Fetching All Department details is done");
		return responseEntity;

	}

	@DeleteMapping("/deleteById/{id}")
	public ResponseEntity<String> deleteDepartmentById(@PathVariable long id) {
		log.info("Deleting Department by ID");

		departmentService.delete(id);
		ResponseEntity<String> responseEntity = new ResponseEntity<>(HttpStatus.OK);
		log.info("Deleted Department by ID successfully");
		return responseEntity;

	}

	@PutMapping("/{id}")
	public ResponseEntity<String> updateDepartmentDetails(@RequestBody Department department, @PathVariable long id)
			throws Exception {

		log.info("Updating Department");

		DepartmentBean department1 = departmentService.getById(id);
		if (department1 != null) {
			department1.setName(department.getName());
			departmentService.save(department1);
		}
		ResponseEntity<String> responseEntity = new ResponseEntity<>("Department updated successfully", HttpStatus.OK);
		log.info("Updating department is done");
		return responseEntity;

	}

	@PutMapping("/updateStatus")
	public void updateStatus(@RequestBody Department department) {
		log.info("Update the  department status ");

		departmentService.updateStatus(department);
		log.info("Updating department status is done");
	}
}
