package com.admin.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@ControllerAdvice
public class ControllerExceptionHandler {
	Logger log = LoggerFactory.getLogger(ControllerExceptionHandler.class);

	@ExceptionHandler(value = RecordNotFoundException.class)
	public ResponseEntity<String> exception(RecordNotFoundException exception) {
		log.error("ResourceNotFoundException-" + exception.getMessage(), exception);
		return new ResponseEntity<>(exception.getMessage(), HttpStatus.NOT_FOUND);
	}

	 @ExceptionHandler(Exception.class)
	    public ResponseEntity<String> handleGenericException(Exception exception) {
	       log.error("Exception-" + exception.getMessage(), exception);
	       return new ResponseEntity<>(exception.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
	    }

	 @ExceptionHandler(BedAlreadyExistsException.class)
	    public ResponseEntity<Object> handleException(BedAlreadyExistsException exception) {
	       log.error("BedAlreadyExistsException-" + exception.getMessage(), exception);
	       return new ResponseEntity<>(exception.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	 @ExceptionHandler(DepartmentAlreadyExistsException.class)
	    public ResponseEntity<Object> handleDepartmentAlreadyExistsException(DepartmentAlreadyExistsException exception) {
	       log.error("DepartmentAlreadyExistsException-" + exception.getMessage(), exception);
	       return new ResponseEntity<>(exception.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	 @ExceptionHandler(DepartmentNotFoundException.class)
	    public ResponseEntity<Object> handleDepartmentNotFoundException(DepartmentNotFoundException exception) {
	       log.error("DepartmentNotFoundException-" + exception.getMessage(), exception);
	       return new ResponseEntity<>(exception.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	 
	 @ExceptionHandler(EmailAlreadyExistsException.class)
	    public ResponseEntity<Object> handleEmailAlreadyExistsException(EmailAlreadyExistsException exception) {
	       log.error("EmailAlreadyExistsException-" + exception.getMessage(), exception);
	       return new ResponseEntity<>(exception.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	 @ExceptionHandler(EmailNotFoundException.class)
	    public ResponseEntity<Object> handleEmailNotFoundException(EmailNotFoundException exception) {
	       log.error("EmailNotFoundException-" + exception.getMessage(), exception);
	       return new ResponseEntity<>(exception.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
	    }
}
